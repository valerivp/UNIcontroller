'use strict';
const utils = require(`uc-utils`);

module.exports.version = '0.0.1';

module.exports.queue = function(name, len) {
    this.locks = [];
    this.id = 1;
    this.lock = function (options) {
        let handle = {};
        handle.id = this.id++;
        //console.warn('lock: ', handle);
        let $this = this;
        if (this.locks.length >= len)
            handle.promise = Promise.reject(new Error('Queue length exceeded'));
        else if (!this.locks.length) {
            //console.warn('locked: ', handle);
            this.locks.push(handle);
            handle.promise = Promise.resolve();
        } else {
            //console.warn('wait: ', handle);
            this.locks.push(handle);
            handle.promise = new Promise(function (resolve, reject) {
                handle.resolve = resolve;
                if ((options || {}).timeout)
                    handle.timeout = setTimeout((function (h, cb_reject) {
                            h.timeout = undefined;
                            clearInterval(h.interval);
                            h.interval = undefined;
                            cb_reject(new Error(`lock timeout ${name}:` + utils.inspect(h)));
                            let i = this.locks.indexOf(h);
                            if (i >= 0)
                                this.locks.splice(i, 1);
                            else
                                throw new Error('Promise item not found (t): ' + utils.inspect(h));
                        }).bind($this, handle, reject),
                        options.timeout);
/*                handle.interval = setInterval((function (h, cb_resolve) {
                    let i = this.locks.indexOf(h);
                    if (i === 0) {
                        //console.warn('lock after wait: ', h);
                        clearInterval(h.interval);
                        h.interval = undefined;
                        clearTimeout(h.timeout);
                        h.timeout = undefined;
                        cb_resolve(); // переведёт промис в состояние fulfilled
                    } else if (i < 0) {
                        throw new Error('Promise item not found (i): ' + utils.inspect(h));
                    }
                }).bind($this, handle, resolve), 0);*/
            });
        }
        return handle.promise;
    };

    this.unlock = function() {
        //console.warn('unlock: ', this.locks[0]);
        this.locks.splice(0, 1);
        if(this.locks.length){
            let h = this.locks[0];
            // clearInterval(h.interval);
            // h.interval = undefined;
            clearTimeout(h.timeout);
            h.timeout = undefined;
            //console.warn('lock after unlock: ', h);
            h.resolve(); // переведёт промис в состояние fulfilled
        }
    };

};
